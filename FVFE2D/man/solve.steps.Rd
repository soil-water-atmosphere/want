% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FVFE2D.R
\name{solve.steps}
\alias{solve.steps}
\title{Do solution steps}
\usage{
solve.steps(model, maxstatechangecrit = 1e-08, RMSMcrit = 1e-05,
  MAMcrit = 1e-05, maxiter = 500, maxiteracceptability = 11,
  verboselevel = 0)
}
\arguments{
\item{model}{a two dimensional flow model of the class \code{[A]FElinear2D},
#' \code{[A]FEquadratic2D}, \code{[A]FEcubic2D},
\code{[A]FEquartic2D} or \code{FV2D} (as generated by \code{set.discretisation})}

\item{maxstatechangecrit}{(default 1E-8): if during the iterations the state changes
are smaller than this value, the iterations will be stopped}

\item{RMSMcrit}{(default 1E-5): if during iterations the RootMeanSquareMisfit is smaller
than this value, the iterations will be stopped}

\item{MAMcrit}{(default 1E-5): if during iterations the MaximumAbsoluteMisfit is smaller
than this number the iterations will be stopped}

\item{maxiter}{(default 500): maximum number of iteration steps}

\item{maxiteracceptability}{(default 10): step made to make new state values
acceptable}

\item{verboselevel}{(default 0): if non-zero, iteration progress will be shown}
}
\value{
returns a list with two entries: \code{RMSM} which contains the root mean
square of the misfits and \code{MAM} which contains the max absolute misfit.
}
\description{
Does steps to determine new state values that solves the flow problem
If the model is linear, one step should suffice. If not-linear it will
try to reduce the misfits iteratively by a Newton-Raphson method.
}
\examples{
nonlingradflux = function(x,y,s,grads) { return(-sqrt(s)*grads)}
domain = matrix(c(1,2,6,1,9,7,4,9),ncol=2,byrow=TRUE)
M = newFLOW2D(domain=domain,systemfluxfunction=nonlingradflux,name="example")
set.isacceptable(M,function(x,y,s){return(s>=0)})
set.discretisation(M,nodes=list(type="hexagonal",side=1),method="FV")
add.spatialflux(M,0.1)
set.BC.fixedstate(M,"NE",0.1)
control = solve.steps(M,verboselevel=1)
}
\seealso{
\code{calc.RMSM}. \code{calc.MAM}, \code{calc.misfits}
}
