% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FVFE2D.R
\name{set.BC.fixedstate}
\alias{set.BC.fixedstate}
\title{Set a fixed state boundary condition}
\usage{
set.BC.fixedstate(model, where, value)
}
\arguments{
\item{model}{a two dimensional flow model of the class \code{[A]FLOW2D} (as generated by
\code{newFLOW2D} or \code{newAFLOW2D}) or \code{[A]FElinear2D},
\code{[A]FEquadratic2D}, \code{[A]FEcubic2D},
\code{[A]FEquartic2D} or \code{FV2D} (as generated by \code{set.discretisation})}

\item{where}{either
\itemize{
 \item  a wind direction ("N","NE","E","SE","S","SW","W","NW")
  or a number identifying the side of the domain,
  as shown by \code{plot.BC.id}
 \item or a vector of two numbers: all the sides between these two
  numbers will be affected by the boundary condition
}}

\item{value}{either
\itemize{
 \item one number
 \item a string giving a variable name. At every evaluation of the boundary condition
 that follows  the value of that variable at evaluation time  will be used.
 \item a vector of two numbers. The boundary values will be linearly interpolated
 between these two numbers over the range given by the  \code{where} argument.
 The order of the points follows the number of the boundary segments.
 \item a vector of two strings. At every evaluation of the boundary condition
 that follows the values of these strings at evaluation time will be linearly
 interpolated  over the range given by the  \code{where} argument.
 The order of the points follows the number of the boundary segments.
 }}
}
\description{
Set a fixed state boundary condition to one of the sides  of the polygon
forming the domain of an existing model
}
\examples{
invgradflux = function(x,y,s,grads) { return(-grads)}
domain = matrix(c(1,2,6,1,9,7,4,9),ncol=2,byrow=TRUE)
M = newFLOW2D(domain=domain,systemfluxfunction=invgradflux,name="example")
set.discretisation(M,nodes=list(type="hexagonal",side=1),method="FV")
add.spatialflux(M,0.1)
set.BC.fixedstate(M,"NE",0)
BCSW = 0.5
set.BC.fixedstate(M,"SW","BCSW")
control = solve.steps(M)
plot(M,fill="state")
}
\seealso{
\code{dataframe.boundaries, plot.BC.id}
}
