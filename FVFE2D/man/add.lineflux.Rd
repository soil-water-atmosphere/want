% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FVFE2Dlineflux.R
\name{add.lineflux}
\alias{add.lineflux}
\title{Add a line flux}
\usage{
add.lineflux(model, points, rates, name)
}
\arguments{
\item{model}{a two dimensional flow model of the class \code{[A]FLOW2D} (as generated by
\code{newFLOW2D} or \code{newAFLOW2D}) or \code{[A]FElinear2D}, \code{[A]FEquadratic2D},
\code{[A]FEcubic2D},
\code{[A]FEquartic2D} or \code{FV2D} (as generated by \code{set.discretisation})}

\item{points}{a matrix with two columns being the x and y coordinates of the
points  that determine the line (the points are connected in order of the rows)}

\item{rates}{is a list of flux definitions. Each element of this list corresponds
to the flux in a definition point of the line, identiefied by the order of the
\code{points} argument.
If there are more elements in the list then definition points in the line, the last
ones are not used. If there are less elements in the list, the last one is reused for
the remaining points. In between two definition points of the line, a flux linearly
interpolated between those of the definition points will be used.
Each of the fluxes in the list has  a physical dimension is that
of the internal flux. The elements in the rates list can be given by either
\itemize{
\item a number,
\item a string giving a variable name (at every evalution later the value of that variable
at that time will be used)
\item or a function of  three argument : x,y,state that
 returns the intenisity of the line flux
 as a function of the coordinates and the state at that point}}

\item{name}{optional name for the flux}
}
\description{
Adds an external line flux to an existing model
}
\examples{
invgradflux = function(x,y,s,grads) { return(-grads)}
domain = matrix(c(1,2,6,1,9,7,4,9),ncol=2,byrow=TRUE)
M = newFLOW2D(domain=domain,systemfluxfunction=invgradflux,name="with lineflux")
set.BC.fixedstate(M,"W",2)
set.BC.fixedstate(M,"E",2)
river = matrix(c(3,1,4,6,7,7),ncol=2,byrow=TRUE)
add.lineflux(M,river,rates=list(-2,-1.5),name="river")
set.discretisation(M,nodes=list(type="hexagonal",side=0.5),method="FE")
solve.steps(M)
plot(M,fill="state",fill.3D=TRUE)
}
